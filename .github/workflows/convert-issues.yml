name: Convert GitHub Issues to Markdown

on:
  workflow_dispatch:

jobs:
  convert:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch and Convert Issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 - <<EOF
          import requests
          import base64
          import os
          import json

          headers = {
              "Authorization": f"Bearer ${GITHUB_TOKEN}",
              "Accept": "application/vnd.github.v3+json"
          }

          repo = "Rollofthedice2/bioanalytics-spiral-data"
          issues_url = f"https://api.github.com/repos/{repo}/issues"
          contents_url = f"https://api.github.com/repos/{repo}/contents/reflections"

          print("🔍 Fetching issues from:", issues_url)
          response = requests.get(issues_url, headers=headers)
          issues = response.json()
          print("📦 Raw issue response:\n", json.dumps(issues, indent=2))

          if not isinstance(issues, list):
              print("🚫 Unexpected format:", issues)
              exit(1)

          if not issues:
              print("⚠️ No issues found.")
              exit(0)

          for issue in issues:
              title = issue.get("title", "Untitled").strip().replace(" ", "_")
              body = issue.get("body", "").strip()

              if not body:
                  print(f"⏭️ Skipping issue '{title}' (empty body).")
                  continue

              filename = f"{title}.md"
              print(f"📄 Preparing file: {filename}")

              encoded_content = base64.b64encode(body.encode()).decode()

              data = {
                  "message": f"Add file from issue: {title}",
                  "content": encoded_content,
                  "branch": "main"
              }

              file_url = f"{contents_url}/{filename}"
              file_response = requests.put(file_url, headers=headers, json=data)

              if file_response.status_code == 201:
                  print(f"✅ Created {filename}")
              elif file_response.status_code == 422:
                  print(f"⚠️ {filename} already exists.")
              else:
                  print(f"❌ Failed to create {filename}. Status: {file_response.status_code}")
                  print(file_response.json())
          EOF
